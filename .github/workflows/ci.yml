name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  PROXEMIC_ENV: development
  RUST_ENV: test
  RUST_LOG: info
  CI: true
  GITHUB_ACTIONS: true
  HOME: /tmp/mock_home
  XDG_DESKTOP_DIR: /tmp/mock_home/Desktop
  XDG_DOCUMENTS_DIR: /tmp/mock_home/Documents
  XDG_DOWNLOAD_DIR: /tmp/mock_home/Downloads

jobs:
  test-rust:
    name: Test Rust Backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up mock user directories
        run: |
          mkdir -p /tmp/mock_home/Desktop
          mkdir -p /tmp/mock_home/Documents
          mkdir -p /tmp/mock_home/Downloads
          chmod 755 /tmp/mock_home/Desktop
          chmod 755 /tmp/mock_home/Documents
          chmod 755 /tmp/mock_home/Downloads
          touch /tmp/mock_home/Documents/test.txt
          touch /tmp/mock_home/Downloads/test.csv

      - name: Install Tauri dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      # Use the exact same Rust version as your rust-toolchain.toml
      - name: Install Rust 1.89.0 (matching local)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: '1.89.0'
          components: rustfmt, clippy

      # Clear everything and start fresh
      - name: Clean slate approach
        run: |
          rm -rf target/
          rm -f Cargo.lock
          # Verify Cargo.toml has the dependencies
          echo "=== Verifying dependencies in Cargo.toml ==="
          grep -A5 -B5 "rand.*=" Cargo.toml
          grep -A5 -B5 "once_cell.*=" Cargo.toml
          grep -A5 -B5 "jsonschema.*=" Cargo.toml
        working-directory: src-tauri

      # Don't use cache at all for now
      - name: Generate Cargo.lock and fetch dependencies
        run: |
          cargo generate-lockfile
          cargo fetch --verbose
          echo "=== Verifying dependencies were fetched ==="
          cargo tree --depth=1 | grep -E "(rand|once_cell|jsonschema)" || echo "FAILED TO FIND DEPENDENCIES"
        working-directory: src-tauri

      - name: Check if dependencies resolve
        run: |
          echo "=== Testing dependency compilation ==="
          cargo check --verbose
        working-directory: src-tauri

      - name: Check formatting
        run: cargo fmt --all -- --check
        working-directory: src-tauri

      - name: Run Clippy
        run: cargo clippy -- -D warnings
        working-directory: src-tauri

      - name: Run tests with isolation
        run: cargo test -- --test-threads=1 --nocapture
        working-directory: src-tauri

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run tests
        run: npm run test -- --passWithNoTests

      - name: Build frontend
        run: npm run build

  build-tauri:
    name: Build Tauri App
    needs: [test-rust, test-frontend]
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust 1.89.0
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: '1.89.0'

      - name: Clean and prepare
        run: |
          cargo clean
          rm -f Cargo.lock
          cargo generate-lockfile
          cargo fetch
        working-directory: src-tauri

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install Tauri dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Build Tauri app
        run: npm run tauri build
