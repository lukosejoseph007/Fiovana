name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  PROXEMIC_ENV: development
  RUST_ENV: test
  RUST_LOG: info
  CI: true
  GITHUB_ACTIONS: true
  HOME: /tmp/mock_home
  XDG_DESKTOP_DIR: /tmp/mock_home/Desktop
  XDG_DOCUMENTS_DIR: /tmp/mock_home/Documents
  XDG_DOWNLOAD_DIR: /tmp/mock_home/Downloads

jobs:
  test-rust:
    name: Test Rust Backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up mock user directories
        run: |
          mkdir -p /tmp/mock_home/Desktop
          mkdir -p /tmp/mock_home/Documents
          mkdir -p /tmp/mock_home/Downloads
          chmod 755 /tmp/mock_home/Desktop
          chmod 755 /tmp/mock_home/Documents
          chmod 755 /tmp/mock_home/Downloads
          touch /tmp/mock_home/Documents/test.txt
          touch /tmp/mock_home/Downloads/test.csv

      - name: Install Tauri dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install Rust 1.89.0 (matching local)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: '1.89.0'
          components: rustfmt, clippy

      - name: Nuclear option - Completely recreate Cargo.toml dependencies
        working-directory: src-tauri
        run: |
          echo "=== Before: Dependencies in Cargo.toml ==="
          grep -A20 "\[dependencies\]" Cargo.toml
          echo ""
          echo "=== Forcing dependency recreation ==="
          sed -i '/^rand = /d' Cargo.toml
          sed -i '/^once_cell = /d' Cargo.toml
          sed -i '/^jsonschema = /d' Cargo.toml

          # Add dependencies using individual sed commands
          sed -i '/^\[dependencies\]/a rand = { version = "0.9.2", features = ["std", "std_rng"] }' Cargo.toml
          sed -i '/^\[dependencies\]/a once_cell = "1.21.3"' Cargo.toml
          sed -i '/^\[dependencies\]/a jsonschema = "0.16"' Cargo.toml

          echo "=== After: Dependencies in Cargo.toml ==="
          grep -A25 "\[dependencies\]" Cargo.toml
          echo ""
          echo "=== Clean everything ==="
          rm -rf target/
          rm -f Cargo.lock

      - name: Force dependency installation with cargo-edit
        working-directory: src-tauri
        run: |
          cargo install cargo-edit --force || echo "cargo-edit install failed, continuing..."

          cargo remove rand once_cell jsonschema 2>/dev/null || echo "Remove failed, continuing..."

          cargo add rand@0.9.2 --features std,std_rng
          cargo add once_cell@1.21.3
          cargo add jsonschema@0.16

          echo "=== Final Cargo.toml dependencies section ==="
          sed -n '/\[dependencies\]/,/\[.*\]/p' Cargo.toml

      - name: Generate fresh lockfile and fetch
        working-directory: src-tauri
        run: |
          cargo generate-lockfile --verbose
          cargo fetch --verbose
          echo "=== Verify dependencies are in cargo tree ==="
          cargo tree --depth=1 | grep -E "(rand|once_cell|jsonschema)" || echo "CRITICAL: Dependencies still missing from tree!"

      - name: Test dependency resolution with cargo metadata
        working-directory: src-tauri
        run: |
          echo "=== Cargo metadata check ==="
          cargo metadata --format-version 1 | jq -r '.packages[] | select(.name | test("rand|once_cell|jsonschema")) | "\(.name) \(.version)"' || echo "jq not available, skipping metadata check"

      - name: Check if dependencies resolve in compilation
        working-directory: src-tauri
        run: |
          echo "=== Testing compilation with verbose output ==="
          timeout 300 cargo check --verbose 2>&1 | head -100

      - name: Check formatting
        working-directory: src-tauri
        run: cargo fmt --all -- --check

      - name: Run Clippy
        working-directory: src-tauri
        run: cargo clippy -- -D warnings

      - name: Run tests with isolation
        working-directory: src-tauri
        run: cargo test -- --test-threads=1 --nocapture

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run tests
        run: npm run test -- --passWithNoTests

      - name: Build frontend
        run: npm run build

  build-tauri:
    name: Build Tauri App
    needs: [test-rust, test-frontend]
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust 1.89.0
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: '1.89.0'

      - name: Force dependency resolution (Unix)
        if: matrix.platform != 'windows-latest'
        working-directory: src-tauri
        run: |
          cargo install cargo-edit --force || echo "cargo-edit install failed"
          cargo remove rand once_cell jsonschema 2>/dev/null || true
          cargo add rand@0.9.2 --features std,std_rng
          cargo add once_cell@1.21.3
          cargo add jsonschema@0.16
          cargo clean
          rm -f Cargo.lock
          cargo generate-lockfile
          cargo fetch

      - name: Force dependency resolution (Windows)
        if: matrix.platform == 'windows-latest'
        working-directory: src-tauri
        run: |
          cargo install cargo-edit --force || echo "cargo-edit install failed"
          cargo remove rand once_cell jsonschema 2>NUL || true
          cargo add rand@0.9.2 --features std,std_rng
          cargo add once_cell@1.21.3
          cargo add jsonschema@0.16
          cargo clean
          rm -f Cargo.lock
          cargo generate-lockfile
          cargo fetch

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install Tauri dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Build Tauri app
        run: npm run tauri build
