name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write # Needed to create and upload releases

env:
  CARGO_TERM_COLOR: always

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install security tools
        run: cargo install cargo-audit cargo-deny

      - name: Security audit
        run: cargo deny check advisories

      - name: License and dependency check
        run: cargo deny check

      - name: Dependency vulnerability scan
        uses: actions/dependency-review-action@v3

  create-release:
    needs: security-scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Version verification
        run: |
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          TAURI_VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          PACKAGE_VERSION=$(jq -r '.version' package.json)

          if [[ "$CARGO_VERSION" != "$TAURI_VERSION" ]] || [[ "$CARGO_VERSION" != "$PACKAGE_VERSION" ]]; then
            echo "Version mismatch detected!"
            echo "Cargo: $CARGO_VERSION, Tauri: $TAURI_VERSION, Package: $PACKAGE_VERSION"
            exit 1
          fi

          echo "Version verified: $CARGO_VERSION"

      - id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: context.ref.replace('refs/tags/', ''),
              body: 'Release created automatically',
              draft: true,        // ðŸ‘ˆ Create as draft for approval
              prerelease: false
            })
            core.setOutput("release_id", data.id)
            core.setOutput("upload_url", data.upload_url)

  build-tauri:
    needs: create-release
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          workspaces: src-tauri

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Tauri dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev \
            libappindicator3-dev librsvg2-dev patchelf

      - name: Build Tauri app
        run: npm run tauri build

      - name: Generate checksums
        run: |
          cd src-tauri/target/release/bundle
          find . -type f \( -name "*.dmg" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" \) -exec sha256sum {} \; > checksums-${{ matrix.platform }}.sha256

      - name: Upload checksums
        uses: actions/upload-artifact@v4
        with:
          name: checksums-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/checksums-${{ matrix.platform }}.sha256

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload \
            ${{ github.ref_name }} \
            ./src-tauri/target/release/bundle/**/* \
            --clobber

  deploy:
    needs: build-tauri
    runs-on: ubuntu-latest
    # Note: To enable manual approval, create 'production' environment in GitHub repo settings
    # and add 'environment: production' here
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run deployment readiness check
        run: |
          cd src-tauri
          cargo run --bin deployment-checker -- --manifest
          echo "Deployment readiness check completed"

      - name: Validate release artifacts
        run: |
          cd src-tauri
          cargo run --bin deployment-checker -- --validate-artifacts ./target/release/bundle ./target/release/bundle/checksums.sha256
          echo "Artifact validation completed"

      - name: Generate deployment manifest
        run: |
          cd src-tauri
          cargo run --bin deployment-checker -- --generate-manifest ./target/release/bundle > deployment-manifest.txt
          echo "Deployment manifest generated"

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: src-tauri/deployment-manifest.txt

      - name: Finalize release
        run: |
          gh release edit ${{ github.ref_name }} --draft=false
          echo "Release ${{ github.ref_name }} published successfully"

      - name: Deployment notification
        run: |
          echo "ðŸš€ Deployment completed for ${{ github.ref_name }}"
          echo "ðŸ“‹ Deployment manifest available as artifact"
          echo "âœ… All security checks passed"
          echo "ðŸ”’ Release artifacts validated and signed"
