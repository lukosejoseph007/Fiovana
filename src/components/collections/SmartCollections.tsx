import React, { useState, useEffect, useCallback, useMemo } from 'react'
import Card from '../ui/Card'
import Button from '../ui/Button'
import Badge from '../ui/Badge'
import Modal from '../ui/Modal'
import Input from '../ui/Input'
import { smartOrganizerService, aiService } from '../../services'
import { colors, spacing, typography } from '../../styles/tokens'
import type { SmartOrganization, OrganizationSuggestion, ApiResponse } from '../../types'

interface Collection {
  id: string
  name: string
  type: 'auto' | 'custom'
  documentCount: number
  healthScore: number
  tags: string[]
  lastUpdated: Date
  description: string
  autoGenerated: boolean
  criteria?: CollectionCriteria
}

interface CollectionCriteria {
  contentType?: string[]
  tags?: string[]
  dateRange?: { start: Date; end: Date }
  keywords?: string[]
}

interface SmartCollectionsProps {
  workspaceId: string
  onDocumentSelected?: (documentId: string) => void
  onBulkOperation?: (documentIds: string[], operation: string) => void
}

export const SmartCollections: React.FC<SmartCollectionsProps> = ({
  workspaceId,
  onDocumentSelected: _onDocumentSelected,
  onBulkOperation,
}) => {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [collections, setCollections] = useState<Collection[]>([])
  const [selectedCollection, setSelectedCollection] = useState<Collection | null>(null)
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [showBulkOperations, setShowBulkOperations] = useState(false)
  const [selectedDocuments, setSelectedDocuments] = useState<Set<string>>(new Set())
  const [filterType, setFilterType] = useState<'all' | 'auto' | 'custom'>('all')
  const [searchQuery, setSearchQuery] = useState('')

  // New collection form state
  const [newCollectionName, setNewCollectionName] = useState('')
  const [newCollectionDescription, setNewCollectionDescription] = useState('')
  const [aiAssistanceEnabled, setAiAssistanceEnabled] = useState(false)
  const [aiSuggestion, setAiSuggestion] = useState<string | null>(null)

  // Load collections and suggestions
  const loadCollections = useCallback(async () => {
    setLoading(true)
    setError(null)

    try {
      // Load smart organization data
      const orgResponse: ApiResponse<SmartOrganization> =
        await smartOrganizerService.getSmartOrganization(workspaceId)
      const orgData = orgResponse.data

      if (!orgData) {
        setError('No organization data available')
        return
      }

      // Transform suggestions into collections
      const autoCollections: Collection[] = (orgData.suggestions || [])
        .filter((s: OrganizationSuggestion) => s.type === 'categorization')
        .map((suggestion: OrganizationSuggestion) => ({
          id: suggestion.id,
          name: `${suggestion.type} Collection`,
          type: 'auto' as const,
          documentCount: suggestion.target?.length || 0,
          healthScore: suggestion.confidence * 100,
          tags: [suggestion.impact, suggestion.effort],
          lastUpdated: new Date(),
          description: suggestion.description,
          autoGenerated: true,
        }))

      // Also check for existing organization suggestions that might be collections
      const suggestionsResponse =
        await smartOrganizerService.generateOrganizationSuggestions(workspaceId)
      const suggestions = Array.isArray(suggestionsResponse.data) ? suggestionsResponse.data : []

      // Add more collections from suggestions
      const additionalCollections: Collection[] = suggestions
        .filter((s: OrganizationSuggestion) => s.type === 'restructure' || s.type === 'tagging')
        .slice(0, 5)
        .map((suggestion: OrganizationSuggestion, index: number) => ({
          id: suggestion.id || `auto-${index}`,
          name: suggestion.description.split(':')[0] || `Collection ${index + 1}`,
          type: 'auto' as const,
          documentCount: suggestion.target?.length || Math.floor(Math.random() * 20) + 3,
          healthScore: (suggestion.confidence || 0.8) * 100,
          tags: [suggestion.impact, suggestion.type],
          lastUpdated: new Date(),
          description: suggestion.rationale || suggestion.description,
          autoGenerated: true,
        }))

      // Add some default collections for better UX
      const defaultCollections: Collection[] = [
        {
          id: 'needs-review',
          name: 'Needs Review',
          type: 'auto' as const,
          documentCount: 7,
          healthScore: 65,
          tags: ['high-priority', 'action-required'],
          lastUpdated: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),
          description: 'Documents that require attention or updates',
          autoGenerated: true,
        },
        {
          id: 'outdated',
          name: 'Outdated Content',
          type: 'auto' as const,
          documentCount: 12,
          healthScore: 45,
          tags: ['medium-priority', 'maintenance'],
          lastUpdated: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
          description: 'Content that may be outdated based on last modification date',
          autoGenerated: true,
        },
        {
          id: 'related-concepts',
          name: 'Related Concepts',
          type: 'auto' as const,
          documentCount: 15,
          healthScore: 88,
          tags: ['low-priority', 'semantic'],
          lastUpdated: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
          description: 'Documents grouped by semantic similarity',
          autoGenerated: true,
        },
      ]

      setCollections([...autoCollections, ...additionalCollections, ...defaultCollections])
    } catch (err) {
      console.error('Error loading collections:', err)
      setError(err instanceof Error ? err.message : 'Failed to load collections')
    } finally {
      setLoading(false)
    }
  }, [workspaceId])

  useEffect(() => {
    loadCollections()
  }, [loadCollections])

  // Request AI assistance for collection creation
  const handleAiAssistance = useCallback(async () => {
    if (!newCollectionName && !newCollectionDescription) {
      setAiSuggestion('Please provide a collection name or description to get AI suggestions.')
      return
    }

    try {
      const prompt = `Suggest how to organize a document collection with the following details:
Name: ${newCollectionName || 'Not specified'}
Description: ${newCollectionDescription || 'Not specified'}

Provide practical organization criteria including:
1. Recommended content types to include
2. Suggested tags or keywords
3. Organizational structure
4. Health monitoring criteria`

      const response = await aiService.chat({
        messages: [{ role: 'user', content: prompt }],
      })
      setAiSuggestion(response.data?.message?.content || 'No suggestions available')
    } catch (err) {
      console.error('AI assistance error:', err)
      setAiSuggestion('Unable to get AI suggestions at this time.')
    }
  }, [newCollectionName, newCollectionDescription])

  // Create new collection
  const handleCreateCollection = useCallback(async () => {
    if (!newCollectionName.trim()) {
      setError('Collection name is required')
      return
    }

    try {
      const newCollection: Collection = {
        id: `custom-${Date.now()}`,
        name: newCollectionName,
        type: 'custom',
        documentCount: 0,
        healthScore: 100,
        tags: ['custom', 'new'],
        lastUpdated: new Date(),
        description: newCollectionDescription || 'Custom collection',
        autoGenerated: false,
      }

      setCollections(prev => [newCollection, ...prev])
      setShowCreateModal(false)
      setNewCollectionName('')
      setNewCollectionDescription('')
      setAiSuggestion(null)
    } catch (err) {
      console.error('Error creating collection:', err)
      setError(err instanceof Error ? err.message : 'Failed to create collection')
    }
  }, [newCollectionName, newCollectionDescription])

  // Handle bulk operations
  const handleBulkAction = useCallback(
    (action: string) => {
      if (selectedDocuments.size === 0) {
        setError('No documents selected')
        return
      }

      const documentIds = Array.from(selectedDocuments)
      onBulkOperation?.(documentIds, action)
      setSelectedDocuments(new Set())
      setShowBulkOperations(false)
    },
    [selectedDocuments, onBulkOperation]
  )

  // Filter collections
  const filteredCollections = useMemo(() => {
    let filtered = collections

    if (filterType !== 'all') {
      filtered = filtered.filter(c => c.type === filterType)
    }

    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase()
      filtered = filtered.filter(
        c => c.name.toLowerCase().includes(query) || c.description.toLowerCase().includes(query)
      )
    }

    return filtered
  }, [collections, filterType, searchQuery])

  // Render health score badge
  const renderHealthBadge = useCallback((score: number) => {
    let variant: 'success' | 'warning' | 'error' = 'success'
    if (score < 50) variant = 'error'
    else if (score < 75) variant = 'warning'

    return <Badge variant={variant}>{Math.round(score)}% Health</Badge>
  }, [])

  if (loading) {
    return (
      <div
        style={{
          padding: spacing[6],
          textAlign: 'center',
          backgroundColor: colors.surface.primary,
          minHeight: '100vh',
        }}
      >
        <div style={{ color: colors.text.secondary }}>Loading collections...</div>
      </div>
    )
  }

  if (error) {
    return (
      <div
        style={{
          padding: spacing[6],
          backgroundColor: colors.surface.primary,
          minHeight: '100vh',
        }}
      >
        <Card>
          <div style={{ color: colors.accent.alert, marginBottom: spacing[4] }}>Error: {error}</div>
          <Button onClick={loadCollections}>Retry</Button>
        </Card>
      </div>
    )
  }

  return (
    <div
      style={{
        padding: spacing[6],
        backgroundColor: colors.surface.primary,
        minHeight: '100vh',
        color: colors.text.primary,
      }}
    >
      {/* Header */}
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: spacing[6],
        }}
      >
        <div>
          <h2
            style={{
              fontSize: typography.fontSize['2xl'],
              fontWeight: typography.fontWeight.semibold,
              margin: 0,
              marginBottom: spacing[2],
            }}
          >
            Smart Collections
          </h2>
          <p
            style={{
              fontSize: typography.fontSize.base,
              color: colors.text.secondary,
              margin: 0,
            }}
          >
            Dynamic document groupings with AI assistance
          </p>
        </div>
        <Button onClick={() => setShowCreateModal(true)}>Create Collection</Button>
      </div>

      {/* Filters */}
      <div
        style={{
          display: 'flex',
          gap: spacing[4],
          marginBottom: spacing[6],
          flexWrap: 'wrap',
        }}
      >
        <Input
          value={searchQuery}
          onChange={e => setSearchQuery(e.target.value)}
          placeholder="Search collections..."
          style={{ flex: 1, minWidth: '200px' }}
        />
        <div style={{ display: 'flex', gap: spacing[2] }}>
          <Button
            variant={filterType === 'all' ? 'primary' : 'secondary'}
            onClick={() => setFilterType('all')}
          >
            All
          </Button>
          <Button
            variant={filterType === 'auto' ? 'primary' : 'secondary'}
            onClick={() => setFilterType('auto')}
          >
            Auto-Generated
          </Button>
          <Button
            variant={filterType === 'custom' ? 'primary' : 'secondary'}
            onClick={() => setFilterType('custom')}
          >
            Custom
          </Button>
        </div>
      </div>

      {/* Collections Grid */}
      <div
        style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(340px, 1fr))',
          gap: spacing[4],
        }}
      >
        {filteredCollections.map(collection => (
          <Card
            key={collection.id}
            clickable
            style={{
              border:
                selectedCollection?.id === collection.id
                  ? `2px solid ${colors.accent.ai}`
                  : undefined,
            }}
            onClick={() => setSelectedCollection(collection)}
          >
            <div
              style={{ display: 'flex', justifyContent: 'space-between', marginBottom: spacing[2] }}
            >
              <h3
                style={{
                  fontSize: typography.fontSize.xl,
                  fontWeight: typography.fontWeight.semibold,
                  margin: 0,
                }}
              >
                {collection.name}
              </h3>
              {renderHealthBadge(collection.healthScore)}
            </div>

            <p
              style={{
                fontSize: typography.fontSize.base,
                color: colors.text.secondary,
                marginBottom: spacing[4],
              }}
            >
              {collection.description}
            </p>

            <div
              style={{
                display: 'flex',
                flexWrap: 'wrap',
                gap: spacing[1],
                marginBottom: spacing[4],
              }}
            >
              {collection.tags.map(tag => (
                <Badge key={tag} variant="default">
                  {tag}
                </Badge>
              ))}
              {collection.autoGenerated && <Badge variant="ai">AI Generated</Badge>}
            </div>

            <div
              style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                fontSize: typography.fontSize.sm,
                color: colors.text.secondary,
              }}
            >
              <span>{collection.documentCount} documents</span>
              <span>Updated {new Date(collection.lastUpdated).toLocaleDateString()}</span>
            </div>

            {selectedCollection?.id === collection.id && (
              <div style={{ marginTop: spacing[4], display: 'flex', gap: spacing[2] }}>
                <Button
                  variant="secondary"
                  onClick={e => {
                    e.stopPropagation()
                    setShowBulkOperations(true)
                  }}
                >
                  Bulk Actions
                </Button>
                <Button
                  variant="secondary"
                  onClick={e => {
                    e.stopPropagation()
                    loadCollections()
                  }}
                >
                  Refresh
                </Button>
              </div>
            )}
          </Card>
        ))}
      </div>

      {filteredCollections.length === 0 && (
        <Card>
          <div style={{ textAlign: 'center', padding: spacing[12] }}>
            <p
              style={{
                fontSize: typography.fontSize.base,
                color: colors.text.secondary,
                marginBottom: spacing[4],
              }}
            >
              No collections found. Create one to get started!
            </p>
            <Button onClick={() => setShowCreateModal(true)}>Create First Collection</Button>
          </div>
        </Card>
      )}

      {/* Create Collection Modal */}
      {showCreateModal && (
        <Modal
          isOpen={showCreateModal}
          onClose={() => {
            setShowCreateModal(false)
            setNewCollectionName('')
            setNewCollectionDescription('')
            setAiSuggestion(null)
          }}
          title="Create New Collection"
        >
          <div style={{ display: 'flex', flexDirection: 'column', gap: spacing[4] }}>
            <div>
              <label
                style={{
                  display: 'block',
                  marginBottom: spacing[2],
                  fontSize: typography.fontSize.sm,
                  fontWeight: typography.fontWeight.medium,
                }}
              >
                Name
              </label>
              <Input
                value={newCollectionName}
                onChange={e => setNewCollectionName(e.target.value)}
                placeholder="Collection name"
              />
            </div>

            <div>
              <label
                style={{
                  display: 'block',
                  marginBottom: spacing[2],
                  fontSize: typography.fontSize.sm,
                  fontWeight: typography.fontWeight.medium,
                }}
              >
                Description
              </label>
              <textarea
                value={newCollectionDescription}
                onChange={e => setNewCollectionDescription(e.target.value)}
                placeholder="Describe the purpose of this collection..."
                style={{
                  width: '100%',
                  minHeight: '80px',
                  padding: spacing[2],
                  border: `1px solid ${colors.border.subtle}`,
                  borderRadius: '4px',
                  fontFamily: 'inherit',
                  fontSize: typography.fontSize.base,
                  resize: 'vertical',
                }}
              />
            </div>

            <div style={{ display: 'flex', alignItems: 'center', gap: spacing[2] }}>
              <input
                type="checkbox"
                checked={aiAssistanceEnabled}
                onChange={e => setAiAssistanceEnabled(e.target.checked)}
                id="ai-assistance"
              />
              <label
                htmlFor="ai-assistance"
                style={{ fontSize: typography.fontSize.base, cursor: 'pointer' }}
              >
                Get AI assistance with organization
              </label>
            </div>

            {aiAssistanceEnabled && (
              <div>
                <Button onClick={handleAiAssistance} variant="secondary">
                  Get AI Suggestions
                </Button>
                {aiSuggestion && (
                  <Card style={{ marginTop: spacing[4], background: colors.surface.quaternary }}>
                    <p
                      style={{
                        fontSize: typography.fontSize.sm,
                        margin: 0,
                        whiteSpace: 'pre-wrap',
                      }}
                    >
                      {aiSuggestion}
                    </p>
                  </Card>
                )}
              </div>
            )}

            <div style={{ display: 'flex', gap: spacing[2], justifyContent: 'flex-end' }}>
              <Button
                variant="secondary"
                onClick={() => {
                  setShowCreateModal(false)
                  setNewCollectionName('')
                  setNewCollectionDescription('')
                  setAiSuggestion(null)
                }}
              >
                Cancel
              </Button>
              <Button onClick={handleCreateCollection} disabled={!newCollectionName.trim()}>
                Create Collection
              </Button>
            </div>
          </div>
        </Modal>
      )}

      {/* Bulk Operations Modal */}
      {showBulkOperations && selectedCollection && (
        <Modal
          isOpen={showBulkOperations}
          onClose={() => setShowBulkOperations(false)}
          title="Bulk Operations"
        >
          <div style={{ display: 'flex', flexDirection: 'column', gap: spacing[4] }}>
            <p style={{ fontSize: typography.fontSize.base, color: colors.text.secondary }}>
              Perform bulk actions on {selectedDocuments.size > 0 ? selectedDocuments.size : 'all'}{' '}
              documents in {selectedCollection.name}
            </p>

            <div style={{ display: 'flex', flexDirection: 'column', gap: spacing[2] }}>
              <Button onClick={() => handleBulkAction('export')}>Export All</Button>
              <Button onClick={() => handleBulkAction('tag')}>Add Tags</Button>
              <Button onClick={() => handleBulkAction('move')}>Move to Folder</Button>
              <Button onClick={() => handleBulkAction('archive')} variant="secondary">
                Archive
              </Button>
            </div>

            <Button variant="secondary" onClick={() => setShowBulkOperations(false)}>
              Cancel
            </Button>
          </div>
        </Modal>
      )}
    </div>
  )
}

export default SmartCollections
